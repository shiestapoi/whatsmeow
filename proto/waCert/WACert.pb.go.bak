// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.6.1
// source: waCert/WACert.proto

package waCert

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoiseCertificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Details       []byte                 `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoiseCertificate) Reset() {
	*x = NoiseCertificate{}
	mi := &file_waCert_WACert_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoiseCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseCertificate) ProtoMessage() {}

func (x *NoiseCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_waCert_WACert_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseCertificate.ProtoReflect.Descriptor instead.
func (*NoiseCertificate) Descriptor() ([]byte, []int) {
	return file_waCert_WACert_proto_rawDescGZIP(), []int{0}
}

func (x *NoiseCertificate) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *NoiseCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CertChain struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Leaf          *CertChain_NoiseCertificate `protobuf:"bytes,1,opt,name=leaf" json:"leaf,omitempty"`
	Intermediate  *CertChain_NoiseCertificate `protobuf:"bytes,2,opt,name=intermediate" json:"intermediate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertChain) Reset() {
	*x = CertChain{}
	mi := &file_waCert_WACert_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertChain) ProtoMessage() {}

func (x *CertChain) ProtoReflect() protoreflect.Message {
	mi := &file_waCert_WACert_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertChain.ProtoReflect.Descriptor instead.
func (*CertChain) Descriptor() ([]byte, []int) {
	return file_waCert_WACert_proto_rawDescGZIP(), []int{1}
}

func (x *CertChain) GetLeaf() *CertChain_NoiseCertificate {
	if x != nil {
		return x.Leaf
	}
	return nil
}

func (x *CertChain) GetIntermediate() *CertChain_NoiseCertificate {
	if x != nil {
		return x.Intermediate
	}
	return nil
}

type NoiseCertificate_Details struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Serial        *uint32                `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	Issuer        *string                `protobuf:"bytes,2,opt,name=issuer" json:"issuer,omitempty"`
	Expires       *uint64                `protobuf:"varint,3,opt,name=expires" json:"expires,omitempty"`
	Subject       *string                `protobuf:"bytes,4,opt,name=subject" json:"subject,omitempty"`
	Key           []byte                 `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoiseCertificate_Details) Reset() {
	*x = NoiseCertificate_Details{}
	mi := &file_waCert_WACert_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoiseCertificate_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseCertificate_Details) ProtoMessage() {}

func (x *NoiseCertificate_Details) ProtoReflect() protoreflect.Message {
	mi := &file_waCert_WACert_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseCertificate_Details.ProtoReflect.Descriptor instead.
func (*NoiseCertificate_Details) Descriptor() ([]byte, []int) {
	return file_waCert_WACert_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NoiseCertificate_Details) GetSerial() uint32 {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return 0
}

func (x *NoiseCertificate_Details) GetIssuer() string {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return ""
}

func (x *NoiseCertificate_Details) GetExpires() uint64 {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return 0
}

func (x *NoiseCertificate_Details) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *NoiseCertificate_Details) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type CertChain_NoiseCertificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Details       []byte                 `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertChain_NoiseCertificate) Reset() {
	*x = CertChain_NoiseCertificate{}
	mi := &file_waCert_WACert_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertChain_NoiseCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertChain_NoiseCertificate) ProtoMessage() {}

func (x *CertChain_NoiseCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_waCert_WACert_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertChain_NoiseCertificate.ProtoReflect.Descriptor instead.
func (*CertChain_NoiseCertificate) Descriptor() ([]byte, []int) {
	return file_waCert_WACert_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CertChain_NoiseCertificate) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CertChain_NoiseCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CertChain_NoiseCertificate_Details struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Serial        *uint32                `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	IssuerSerial  *uint32                `protobuf:"varint,2,opt,name=issuerSerial" json:"issuerSerial,omitempty"`
	Key           []byte                 `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	NotBefore     *uint64                `protobuf:"varint,4,opt,name=notBefore" json:"notBefore,omitempty"`
	NotAfter      *uint64                `protobuf:"varint,5,opt,name=notAfter" json:"notAfter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertChain_NoiseCertificate_Details) Reset() {
	*x = CertChain_NoiseCertificate_Details{}
	mi := &file_waCert_WACert_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertChain_NoiseCertificate_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertChain_NoiseCertificate_Details) ProtoMessage() {}

func (x *CertChain_NoiseCertificate_Details) ProtoReflect() protoreflect.Message {
	mi := &file_waCert_WACert_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertChain_NoiseCertificate_Details.ProtoReflect.Descriptor instead.
func (*CertChain_NoiseCertificate_Details) Descriptor() ([]byte, []int) {
	return file_waCert_WACert_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *CertChain_NoiseCertificate_Details) GetSerial() uint32 {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return 0
}

func (x *CertChain_NoiseCertificate_Details) GetIssuerSerial() uint32 {
	if x != nil && x.IssuerSerial != nil {
		return *x.IssuerSerial
	}
	return 0
}

func (x *CertChain_NoiseCertificate_Details) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CertChain_NoiseCertificate_Details) GetNotBefore() uint64 {
	if x != nil && x.NotBefore != nil {
		return *x.NotBefore
	}
	return 0
}

func (x *CertChain_NoiseCertificate_Details) GetNotAfter() uint64 {
	if x != nil && x.NotAfter != nil {
		return *x.NotAfter
	}
	return 0
}

var File_waCert_WACert_proto protoreflect.FileDescriptor

var file_waCert_WACert_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x77, 0x61, 0x43, 0x65, 0x72, 0x74, 0x2f, 0x57, 0x41, 0x43, 0x65, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x57, 0x41, 0x43, 0x65, 0x72, 0x74, 0x22, 0xcb, 0x01,
	0x0a, 0x10, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x7f, 0x0a, 0x07, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xec, 0x02, 0x0a, 0x09,
	0x43, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x65, 0x61,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x57, 0x41, 0x43, 0x65, 0x72, 0x74,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x69, 0x73, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6c, 0x65, 0x61,
	0x66, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x57, 0x41, 0x43, 0x65, 0x72, 0x74,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x69, 0x73, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x1a, 0xde, 0x01, 0x0a, 0x10, 0x4e, 0x6f,
	0x69, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x91, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x69, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x6f, 0x69, 0x2f, 0x77, 0x68, 0x61, 0x74, 0x73, 0x6d, 0x65, 0x6f, 0x77, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x61, 0x43, 0x65, 0x72, 0x74,
})

var (
	file_waCert_WACert_proto_rawDescOnce sync.Once
	file_waCert_WACert_proto_rawDescData []byte
)

func file_waCert_WACert_proto_rawDescGZIP() []byte {
	file_waCert_WACert_proto_rawDescOnce.Do(func() {
		file_waCert_WACert_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_waCert_WACert_proto_rawDesc), len(file_waCert_WACert_proto_rawDesc)))
	})
	return file_waCert_WACert_proto_rawDescData
}

var file_waCert_WACert_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_waCert_WACert_proto_goTypes = []any{
	(*NoiseCertificate)(nil),                   // 0: WACert.NoiseCertificate
	(*CertChain)(nil),                          // 1: WACert.CertChain
	(*NoiseCertificate_Details)(nil),           // 2: WACert.NoiseCertificate.Details
	(*CertChain_NoiseCertificate)(nil),         // 3: WACert.CertChain.NoiseCertificate
	(*CertChain_NoiseCertificate_Details)(nil), // 4: WACert.CertChain.NoiseCertificate.Details
}
var file_waCert_WACert_proto_depIdxs = []int32{
	3, // 0: WACert.CertChain.leaf:type_name -> WACert.CertChain.NoiseCertificate
	3, // 1: WACert.CertChain.intermediate:type_name -> WACert.CertChain.NoiseCertificate
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_waCert_WACert_proto_init() }
func file_waCert_WACert_proto_init() {
	if File_waCert_WACert_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_waCert_WACert_proto_rawDesc), len(file_waCert_WACert_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_waCert_WACert_proto_goTypes,
		DependencyIndexes: file_waCert_WACert_proto_depIdxs,
		MessageInfos:      file_waCert_WACert_proto_msgTypes,
	}.Build()
	File_waCert_WACert_proto = out.File
	file_waCert_WACert_proto_goTypes = nil
	file_waCert_WACert_proto_depIdxs = nil
}
